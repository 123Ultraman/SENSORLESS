#ifndef OBSERVE_H
#define OBSERVE_H
#include "foc.h"
#include "stdint.h"
typedef struct PLL_Structure
{
    float err;
    float Kp;
    float Ki;
    float iterm;
    float Out;
}PLL_Structure;

typedef struct FluxObserver
{
    float x1_hat;
    float x2_hat;
    float x1_hat_pre;
    float x2_hat_pre;
    float Gain;
    float err;
    float dt;
    uint32_t DWT_CNT;
    float cos_theta;
    float sin_theta;
    float theta;
    float theta_pre;
	float Last_theta;
	float Speed;
	float Speed_pre;
	float ud;
	float uq;
    float filtered_PLL_Out;
    float theta_atan2;
    float previous_theta;
    float omega ;
    PLL_Structure PLL;
	float LPFFilter;
} FluxObserver;

typedef struct HFSVI_Structure
{
    float Ialpha_pre;
	float Ibeta_pre;
	float delta_Ialpha;
	float delta_Ibeta;
	int singalUh;
	float Uh;
	float Icos;
	float Isin;
	float modulu;
	float IsinNormalized;
	float IcosNormalized;
	float tildeTheta;
	PLL_Structure PLL;
	float we;
	float we_pre;
	float theta;
	float theta_pre;
	float dt;
	float LPFFilter;
	float Speed;
} HFSVI_Structure;

typedef enum
{
	NO_FIELD_WEAKEN,
	FIELD_WEAKEN,
} FW_STATE_TYPE;

#define UTILS_IS_INF(x) ((x) == (1.0 / 0.0) || (x) == (-1.0 / 0.0))
#define UTILS_IS_NAN(x) ((x) != (x)) //
#define UTILS_NAN_ZERO(x) (x = UTILS_IS_NAN(x) ? 0.0f : x)
#define U1          6.9282031f       //  U1 = U_dc/sqrt(3)
//square
#define SQ(x) ((x) * (x))
#define threshold 7.639442f
extern FluxObserver observer;
extern HFSVI_Structure HFSVI;
float utils_fast_atan2(float y, float x);
int utils_truncate_number_abs(float *number, float max);
void Non_flux_Init(FluxObserver *observer);
void flux_observer(float V_alpha, float V_beta, float i_alpha, float i_beta, FluxObserver *observer);
float Hysteresis(float modulus);
float U_ref_lookup(float F1_vaule);
void AntiPark_Overmodulation(UI_2s* UI_2s,UI_2r* UI_2r,float Theta_E);
void myfun(float T3, float T4, float* T1, float* T2) ;
void SVPWM_120(UI_2s* UI_2s);
FW_STATE_TYPE Get_Field_State(float modulu,float SpeedRef);
void flux_weaken_init(float SpeedKp,float SpeedKi,float CurrentKp,float CurrentKi);
void flux_weaken(void);
void HFSVI_Sensorless_Init(HFSVI_Structure *hfsvi);
void HFSVI_Sensorless(HFSVI_Structure *hfsvi,MOTOR_HandleTypeDef *motor);
static const float F1[] = { 6.914319, \
				6.940969, 6.964049, 6.985143, 7.004737, 7.023078, \
				7.040321, 7.056577, 7.071930, 7.086446, 7.100181, \
				7.113181, 7.125484, 7.137125, 7.148134, 7.158538, \
				7.168361, 7.177625, 7.186349, 7.194552, 7.202250, \
				7.209459, 7.216192, 7.222465, 7.228288, 7.233673, \
				7.238633, 7.243176, 7.247312, 7.251052, 7.254404, \
				7.257375, 7.259975, 7.262211, 7.264089, 7.265617, \
				7.266802, 7.267650, 7.268167, 7.268359, 7.268487, \
				7.268909, 7.269605, 7.270555, 7.271738, 7.273137, \
				7.274736, 7.276519, 7.278472, 7.280581, 7.282834, \
				7.285221, 7.287729, 7.290350, 7.293074, 7.295892, \
				7.298796, 7.301780, 7.304834, 7.307954, 7.311133, \
				7.314365, 7.317645, 7.320968, 7.324328, 7.327722, \
				7.331146, 7.334594, 7.338065, 7.341554, 7.345058, \
				7.348574, 7.352099, 7.355630, 7.359166, 7.362703, \
				7.366240, 7.369774, 7.373304, 7.376827, 7.380342, \
				7.383847, 7.387341, 7.390823, 7.394290, 7.397743, \
				7.401179, 7.404597, 7.407997, 7.411378, 7.414739, \
				7.418078, 7.421396, 7.424691, 7.427963, 7.431211, \
				7.434434, 7.437633, 7.440806, 7.443954, 7.447075, \
				7.450169, 7.453237, 7.456277, 7.459289, 7.462274, \
				7.465231, 7.468159, 7.471059, 7.473930, 7.476773, \
				7.479587, 7.482371, 7.485127, 7.487853, 7.490550, \
				7.493218, 7.495857, 7.498466, 7.501046, 7.503597, \
				7.506119, 7.508611, 7.511075, 7.513509, 7.515914, \
				7.518290, 7.520638, 7.522956, 7.525246, 7.527507, \
				7.529740, 7.531945, 7.534121, 7.536269, 7.538390, \
				7.540482, 7.542547, 7.544584, 7.546593, 7.548576, \
				7.550531, 7.552460, 7.554362, 7.556237, 7.558085, \
				7.559908, 7.561704, 7.563474, 7.565219, 7.566938, \
				7.568631, 7.570299, 7.571943, 7.573561, 7.575155, \
				7.576724, 7.578269, 7.579790, 7.581286, 7.582759, \
				7.584209, 7.585635, 7.587037, 7.588417, 7.589774, \
				7.591108, 7.592420, 7.593709, 7.594976, 7.596221, \
				7.597445, 7.598647, 7.599828, 7.600987, 7.602125, \
				7.603243, 7.604339, 7.605416, 7.606472, 7.607508, \
				7.608523, 7.609520, 7.610496, 7.611453, 7.612391, \
				7.613309, 7.614209, 7.615090, 7.615953, 7.616797, \
				7.617622, 7.618430, 7.619220, 7.619992, 7.620746, \
				7.621483, 7.622203, 7.622905, 7.623591, 7.624260, \
				7.624912, 7.625547, 7.626167, 7.626770, 7.627357, \
				7.627928, 7.628484, 7.629024, 7.629549, 7.630058, \
				7.630552, 7.631031, 7.631495, 7.631945, 7.632380, \
				7.632801, 7.633207, 7.633599, 7.633977, 7.634341, \
				7.634692, 7.635029, 7.635352, 7.635662, 7.635959, \
				7.636243, 7.636513, 7.636771, 7.637016, 7.637249, \
				7.637469, 7.637677, 7.637872, 7.638056, 7.638227, \
				7.638387, 7.638534, 7.638671, 7.638795, 7.638908, \
				7.639010, 7.639101, 7.639181, 7.639249, 7.639307, \
				7.639354, 7.639391, 7.639417, 7.639432, 7.639442 \
				};

static const float U_ref[] ={ 6.914319, \
				6.942087, 6.969856, 6.997624, 7.025392, 7.053161, \
				7.080929, 7.108698, 7.136466, 7.164234, 7.192003, \
				7.219771, 7.247539, 7.275308, 7.303076, 7.330844, \
				7.358613, 7.386381, 7.414149, 7.441918, 7.469686, \
				7.497454, 7.525223, 7.552991, 7.580759, 7.608528, \
				7.636296, 7.664064, 7.691833, 7.719601, 7.747370, \
				7.775138, 7.802906, 7.830675, 7.858443, 7.886211, \
				7.913980, 7.941748, 7.969516, 7.997285, 8.025053, \
				8.052821, 8.080590, 8.108358, 8.136126, 8.163895, \
				8.191663, 8.219431, 8.247200, 8.274968, 8.302737, \
				8.330505, 8.358273, 8.386042, 8.413810, 8.441578, \
				8.469347, 8.497115, 8.524883, 8.552652, 8.580420, \
				8.608188, 8.635957, 8.663725, 8.691493, 8.719262, \
				8.747030, 8.774798, 8.802567, 8.830335, 8.858104, \
				8.885872, 8.913640, 8.941409, 8.969177, 8.996945, \
				9.024714, 9.052482, 9.080250, 9.108019, 9.135787, \
				9.163555, 9.191324, 9.219092, 9.246860, 9.274629, \
				9.302397, 9.330165, 9.357934, 9.385702, 9.413471, \
				9.441239, 9.469007, 9.496776, 9.524544, 9.552312, \
				9.580081, 9.607849, 9.635617, 9.663386, 9.691154, \
				9.718922, 9.746691, 9.774459, 9.802227, 9.829996, \
				9.857764, 9.885532, 9.913301, 9.941069, 9.968838, \
				9.996606, 10.024374, 10.052143, 10.079911, 10.107679,  \
				10.135448, 10.163216, 10.190984, 10.218753, 10.246521, \
				10.274289, 10.302058, 10.329826, 10.357594, 10.385363, \
				10.413131, 10.440899, 10.468668, 10.496436, 10.524205, \
				10.551973, 10.579741, 10.607510, 10.635278, 10.663046, \
				10.690815, 10.718583, 10.746351, 10.774120, 10.801888, \
				10.829656, 10.857425, 10.885193, 10.912961, 10.940730, \
				10.968498, 10.996266, 11.024035, 11.051803, 11.079571, \
				11.107340, 11.135108, 11.162877, 11.190645, 11.218413, \
				11.246182, 11.273950, 11.301718, 11.329487, 11.357255, \
				11.385023, 11.412792, 11.440560, 11.468328, 11.496097, \
				11.523865, 11.551633, 11.579402, 11.607170, 11.634938, \
				11.662707, 11.690475, 11.718244, 11.746012, 11.773780, \
				11.801549, 11.829317, 11.857085, 11.884854, 11.912622, \
				11.940390, 11.968159, 11.995927, 12.023695, 12.051464, \
				12.079232, 12.107000, 12.134769, 12.162537, 12.190305, \
				12.218074, 12.245842, 12.273611, 12.301379, 12.329147, \
				12.356916, 12.384684, 12.412452, 12.440221, 12.467989, \
				12.495757, 12.523526, 12.551294, 12.579062, 12.606831, \
				12.634599, 12.662367, 12.690136, 12.717904, 12.745672, \
				12.773441, 12.801209, 12.828978, 12.856746, 12.884514, \
				12.912283, 12.940051, 12.967819, 12.995588, 13.023356, \
				13.051124, 13.078893, 13.106661, 13.134429, 13.162198, \
				13.189966, 13.217734, 13.245503, 13.273271, 13.301039, \
				13.328808, 13.356576, 13.384345, 13.412113, 13.439881, \
				13.467650, 13.495418, 13.523186, 13.550955, 13.578723, \
				13.606491, 13.634260, 13.662028, 13.689796, 13.717565, \
				13.745333, 13.773101, 13.800870, 13.828638, 13.856406 \
				};

#endif

